class Solution {
public:
    struct unionfind{
        vector<int>parent;
        unionfind(int n){
            parent.resize(n);
            for(int i=0;i<n;i++){
                parent[i] = i;
            }
            
        }
        int find(int node){
            if(parent[node] ==node){
                return node;
            }
            else{
                return parent[node] = find(parent[node]);
            }
        }
        void Union(int u,int v){
            u = find(u);
            v = find(v);
            if(u!=v){
                parent[v] = u;
            }
        }
    };
    int minMalwareSpread(vector<vector<int>>& v, vector<int>&ini) {
        vector<int>adj[v.size()];
        int n=v.size();
        unionfind u = unionfind(n);
        for(int i=0;i<v.size();i++){
            for(int j=0;j<v.size();j++){
                if(v[i][j]){
                    u.Union(i,j);
                }
            }
        }
        map<int,vector<int>>m;
        map<int,int>m1;
        for(auto i:ini){
            m1[i]++;
        }
        for(int i=0;i<u.parent.size();i++){
            m[u.parent[i]].push_back(i);
        }
        // for(auto i:m){
        //     cout<<i.first<<" ";
        //     for(auto j:i.second){
        //         cout<<j<<" ";
        //     }
        //     cout<<endl;
        // }
        vector<int>ans(n);
        int mxsave = 0;
        int sol = -1;
        for(auto &i:m){
            int count=0;
            int idx=INT_MAX;
           for(auto &j:i.second){
               if(m1[j]){
                   idx=min(j,idx);
                   count++;
               }
           }
            if(count==0){
                continue;
            }
            int save=0;
            if(count==1){
                save = i.second.size();
            }
            if(save==0 && sol==-1){
                sol = idx;
            }
            else if(mxsave<=save){
                if(mxsave == save){
                sol = min(sol,idx);
                }
                else{
                    mxsave = save;
                    sol = idx;
                }
            }
        }
        return sol;
        
    }
};